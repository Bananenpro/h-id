// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: oauth.sql

package db

import (
	"context"
	"database/sql"
)

const createOAuthToken = `-- name: CreateOAuthToken :one
INSERT INTO oauth (
  created_at, category, token_hash, redirect_uri, client_id, user_id, scopes, data, expires, used
) VALUES (
  ?,?,?,?,?,?,?,?,?,?
) RETURNING created_at, client_id, category, token_hash, redirect_uri, user_id, scopes, data, expires, used
`

type CreateOAuthTokenParams struct {
	CreatedAt   int64
	Category    string
	TokenHash   []byte
	RedirectUri string
	ClientID    string
	UserID      string
	Scopes      string
	Data        []byte
	Expires     int64
	Used        bool
}

func (q *Queries) CreateOAuthToken(ctx context.Context, arg CreateOAuthTokenParams) (Oauth, error) {
	row := q.db.QueryRowContext(ctx, createOAuthToken,
		arg.CreatedAt,
		arg.Category,
		arg.TokenHash,
		arg.RedirectUri,
		arg.ClientID,
		arg.UserID,
		arg.Scopes,
		arg.Data,
		arg.Expires,
		arg.Used,
	)
	var i Oauth
	err := row.Scan(
		&i.CreatedAt,
		&i.ClientID,
		&i.Category,
		&i.TokenHash,
		&i.RedirectUri,
		&i.UserID,
		&i.Scopes,
		&i.Data,
		&i.Expires,
		&i.Used,
	)
	return i, err
}

const deleteOAuthToken = `-- name: DeleteOAuthToken :execresult
DELETE FROM oauth WHERE (client_id = ? AND category = ? AND token_hash = ?) OR expires < ?4
`

type DeleteOAuthTokenParams struct {
	ClientID  string
	Category  string
	TokenHash []byte
	Now       int64
}

func (q *Queries) DeleteOAuthToken(ctx context.Context, arg DeleteOAuthTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteOAuthToken,
		arg.ClientID,
		arg.Category,
		arg.TokenHash,
		arg.Now,
	)
}

const deleteOAuthTokenByUser = `-- name: DeleteOAuthTokenByUser :exec
DELETE FROM oauth WHERE (client_id = ? AND user_id = ?) OR expires < ?3
`

type DeleteOAuthTokenByUserParams struct {
	ClientID string
	UserID   string
	Now      int64
}

func (q *Queries) DeleteOAuthTokenByUser(ctx context.Context, arg DeleteOAuthTokenByUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteOAuthTokenByUser, arg.ClientID, arg.UserID, arg.Now)
	return err
}

const findOAuthPermissions = `-- name: FindOAuthPermissions :one
SELECT created_at, client_id, user_id, scopes FROM permissions WHERE client_id = ? AND user_id = ?
`

type FindOAuthPermissionsParams struct {
	ClientID string
	UserID   string
}

func (q *Queries) FindOAuthPermissions(ctx context.Context, arg FindOAuthPermissionsParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, findOAuthPermissions, arg.ClientID, arg.UserID)
	var i Permission
	err := row.Scan(
		&i.CreatedAt,
		&i.ClientID,
		&i.UserID,
		&i.Scopes,
	)
	return i, err
}

const findOAuthToken = `-- name: FindOAuthToken :one
SELECT created_at, client_id, category, token_hash, redirect_uri, user_id, scopes, data, expires, used FROM oauth WHERE category = ? AND token_hash = ? AND expires > ?3
`

type FindOAuthTokenParams struct {
	Category  string
	TokenHash []byte
	Now       int64
}

func (q *Queries) FindOAuthToken(ctx context.Context, arg FindOAuthTokenParams) (Oauth, error) {
	row := q.db.QueryRowContext(ctx, findOAuthToken, arg.Category, arg.TokenHash, arg.Now)
	var i Oauth
	err := row.Scan(
		&i.CreatedAt,
		&i.ClientID,
		&i.Category,
		&i.TokenHash,
		&i.RedirectUri,
		&i.UserID,
		&i.Scopes,
		&i.Data,
		&i.Expires,
		&i.Used,
	)
	return i, err
}

const revokeOAuthPermissions = `-- name: RevokeOAuthPermissions :execresult
DELETE FROM permissions WHERE client_id = ? AND user_id = ?
`

type RevokeOAuthPermissionsParams struct {
	ClientID string
	UserID   string
}

func (q *Queries) RevokeOAuthPermissions(ctx context.Context, arg RevokeOAuthPermissionsParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, revokeOAuthPermissions, arg.ClientID, arg.UserID)
}

const setOAuthPermissions = `-- name: SetOAuthPermissions :one
REPLACE INTO permissions (
  created_at,client_id,user_id,scopes
) VALUES (?,?,?,?)
RETURNING created_at, client_id, user_id, scopes
`

type SetOAuthPermissionsParams struct {
	CreatedAt int64
	ClientID  string
	UserID    string
	Scopes    string
}

func (q *Queries) SetOAuthPermissions(ctx context.Context, arg SetOAuthPermissionsParams) (Permission, error) {
	row := q.db.QueryRowContext(ctx, setOAuthPermissions,
		arg.CreatedAt,
		arg.ClientID,
		arg.UserID,
		arg.Scopes,
	)
	var i Permission
	err := row.Scan(
		&i.CreatedAt,
		&i.ClientID,
		&i.UserID,
		&i.Scopes,
	)
	return i, err
}

const useOAuthToken = `-- name: UseOAuthToken :execresult
UPDATE oauth SET used = TRUE WHERE client_id = ? AND category = ? AND token_hash = ?
`

type UseOAuthTokenParams struct {
	ClientID  string
	Category  string
	TokenHash []byte
}

func (q *Queries) UseOAuthToken(ctx context.Context, arg UseOAuthTokenParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, useOAuthToken, arg.ClientID, arg.Category, arg.TokenHash)
}
