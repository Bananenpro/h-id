// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: passkey.sql

package db

import (
	"context"
	"database/sql"
)

const createPasskey = `-- name: CreatePasskey :execresult
INSERT INTO passkeys (
  id, cred_id, name, created_at, user_id, credential
) VALUES (
  ?, ?, ?, ?, ?, ?
)
`

type CreatePasskeyParams struct {
	ID         string
	CredID     []byte
	Name       string
	CreatedAt  int64
	UserID     string
	Credential []byte
}

func (q *Queries) CreatePasskey(ctx context.Context, arg CreatePasskeyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPasskey,
		arg.ID,
		arg.CredID,
		arg.Name,
		arg.CreatedAt,
		arg.UserID,
		arg.Credential,
	)
}

const deletePasskey = `-- name: DeletePasskey :execresult
DELETE FROM passkeys WHERE user_id = ? AND id = ?
`

type DeletePasskeyParams struct {
	UserID string
	ID     string
}

func (q *Queries) DeletePasskey(ctx context.Context, arg DeletePasskeyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, deletePasskey, arg.UserID, arg.ID)
}

const findPasskey = `-- name: FindPasskey :one
SELECT id, cred_id, name, created_at, user_id, credential FROM passkeys WHERE user_id = ? AND id = ?
`

type FindPasskeyParams struct {
	UserID string
	ID     string
}

func (q *Queries) FindPasskey(ctx context.Context, arg FindPasskeyParams) (Passkey, error) {
	row := q.db.QueryRowContext(ctx, findPasskey, arg.UserID, arg.ID)
	var i Passkey
	err := row.Scan(
		&i.ID,
		&i.CredID,
		&i.Name,
		&i.CreatedAt,
		&i.UserID,
		&i.Credential,
	)
	return i, err
}

const findPasskeys = `-- name: FindPasskeys :many
SELECT id, cred_id, name, created_at, user_id, credential FROM passkeys WHERE user_id = ?
`

func (q *Queries) FindPasskeys(ctx context.Context, userID string) ([]Passkey, error) {
	rows, err := q.db.QueryContext(ctx, findPasskeys, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Passkey
	for rows.Next() {
		var i Passkey
		if err := rows.Scan(
			&i.ID,
			&i.CredID,
			&i.Name,
			&i.CreatedAt,
			&i.UserID,
			&i.Credential,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasskey = `-- name: UpdatePasskey :execresult
UPDATE passkeys SET name = ? WHERE user_id = ? AND id = ?
`

type UpdatePasskeyParams struct {
	Name   string
	UserID string
	ID     string
}

func (q *Queries) UpdatePasskey(ctx context.Context, arg UpdatePasskeyParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePasskey, arg.Name, arg.UserID, arg.ID)
}

const updatePasskeyCredential = `-- name: UpdatePasskeyCredential :execresult
UPDATE passkeys SET credential = ? WHERE user_id = ? AND cred_id = ?
`

type UpdatePasskeyCredentialParams struct {
	Credential []byte
	UserID     string
	CredID     []byte
}

func (q *Queries) UpdatePasskeyCredential(ctx context.Context, arg UpdatePasskeyCredentialParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updatePasskeyCredential, arg.Credential, arg.UserID, arg.CredID)
}
